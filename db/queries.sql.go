// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, username, address, seed, created_at)
  VALUES ($1, $2, $3, $4, now()) RETURNING id
`

type CreateAccountParams struct {
	UserID   int64
	Username string
	Address  string
	Seed     string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (int64, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.UserID,
		arg.Username,
		arg.Address,
		arg.Seed,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createState = `-- name: CreateState :exec
INSERT INTO states (user_id, state, data, meta, created_at)
  VALUES ($1, $2, $3, $4, now())
`

type CreateStateParams struct {
	UserID int64
	State  string
	Data   map[string]interface{}
	Meta   map[string]interface{}
}

func (q *Queries) CreateState(ctx context.Context, arg CreateStateParams) error {
	_, err := q.db.Exec(ctx, createState,
		arg.UserID,
		arg.State,
		arg.Data,
		arg.Meta,
	)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, user_id, username, address, seed, created_at FROM accounts
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, userID int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Address,
		&i.Seed,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByKey = `-- name: GetAccountByKey :one
SELECT id, user_id, username, address, seed, created_at FROM accounts
WHERE username = $1 or address = $1
`

func (q *Queries) GetAccountByKey(ctx context.Context, key string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByKey, key)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Address,
		&i.Seed,
		&i.CreatedAt,
	)
	return i, err
}

const getState = `-- name: GetState :one
SELECT user_id, state, data, meta, created_at FROM states
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetState(ctx context.Context, userID int64) (State, error) {
	row := q.db.QueryRow(ctx, getState, userID)
	var i State
	err := row.Scan(
		&i.UserID,
		&i.State,
		&i.Data,
		&i.Meta,
		&i.CreatedAt,
	)
	return i, err
}

const updateStateData = `-- name: UpdateStateData :exec
UPDATE states
SET data = $1
WHERE user_id = $2
`

type UpdateStateDataParams struct {
	Data   map[string]interface{}
	UserID int64
}

func (q *Queries) UpdateStateData(ctx context.Context, arg UpdateStateDataParams) error {
	_, err := q.db.Exec(ctx, updateStateData, arg.Data, arg.UserID)
	return err
}
